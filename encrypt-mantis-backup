#!/bin/bash
set -o nounset
set -o pipefail
set -o errexit
set -o errtrace
trap 'echo "Error at line $LINENO, exit code $?" >&2' ERR
shopt -s nullglob
shopt -s failglob

# Configuration ####################################################################################
# Directory where output of 'download-mantis-backup' script is located.
# ATTENTION: The backups here will NOT be deleted after encryption!
INPUT='./mantis-backups'
# Array of files to encrypt to output directory.
FILES=( 'mantis-database.zip' 'mantis-attachments.zip' )
# Directory where to put the encrypted backups.
OUTPUT='./mantis-backups-encrypted'
# Unix permissions of the backup directories and files which will be created in $OUTPUT.
OUTPUT_DIR_MODE='755'
OUTPUT_FILE_MODE='644'
# Fingerprint (or name) of the GPG recipient key. Will be downloaded/refreshed automatically.
RECIPIENT=''
####################################################################################################

date=$(date --rfc-3339=date)
INPUT="$INPUT/$date"
OUTPUT="$OUTPUT/$date"
if [ ! -d "$INPUT" ] ; then
    echo "Error: No input backup found! Directory: $INPUT" >&2
    exit 1
fi
if [ -e "$OUTPUT" ] ; then
    echo "Error: Ouput already exists! Directory: $OUTPUT" >&2
    exit 1
fi
mkdir --parents --mode "$OUTPUT_DIR_MODE" -- "$OUTPUT"

# Keyservers often don't answer in my experience so try downloading the key multiple times
got_key=0
for ((i=0; i<10; ++i)) ; do
	if gpg --keyserver hkp://pool.sks-keyservers.net --batch --keyserver-options timeout=10 --recv-key "$RECIPIENT" &> /dev/null ; then
		got_key=1
		break
	fi
done
# Always fail if we were unable to download the key to ensure we notice revocation
if [ "$got_key" != 1 ] ; then
    echo "Failed to download the GPG key: $RECIPIENT" >&2
    exit 1
fi

for f in "${FILES[@]}" ; do
	if [ ! -f "$INPUT/$f" ] ; then
		echo "Error: Input backup is incomplete, missing: $INPUT/$f" >&2
		exit 1
	fi

	# Notice: If the key is revoked it won't be accepted even with "--trust-model always",
	# I've tested this.
	gpg --batch --encrypt --recipient "$RECIPIENT" --trust-model always \
		--output "$OUTPUT/$f.gpg.tmp" -- "$INPUT/$f"
	gpg --batch --detach-sign --output "$OUTPUT/$f.sig.tmp" -- "$OUTPUT/$f.gpg.tmp"

	chmod "$OUTPUT_FILE_MODE" -- "$OUTPUT/$f.gpg.tmp" "$OUTPUT/$f.sig.tmp"

	mv -- "$OUTPUT/$f.gpg.tmp" "$OUTPUT/$f.gpg"
	mv -- "$OUTPUT/$f.sig.tmp" "$OUTPUT/$f.sig"
done
