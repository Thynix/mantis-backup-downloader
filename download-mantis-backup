#!/bin/bash
set -o nounset
set -o pipefail
set -o errexit
set -o errtrace
trap 'echo "Error at line $LINENO, exit code $?" >&2' ERR
shopt -s nullglob
shopt -s failglob

# Configuration ####################################################################################
# TODO: import these from a separate file that can be .gitignored to reduce the risk of committing credentials.
# Domain of bugtracker
TRACKER="REPLACE_THIS.mantishub.io"
# Mantis login data. Please URL-encode this if necessary.
# You can also read these from a file with: "<(/path/to/data)"
LOGIN_EMAIL=""
PASSWORD=""
# Location where to put the backup directories. Must not start with "-".
OUTPUT="./mantis-backups"
####################################################################################################

date=$(date --rfc-3339=date)
OUTPUT="$OUTPUT/$date"
if [ -e "$OUTPUT" ] ; then
	echo "Error: Backup already exists! Directory: $OUTPUT" >&2
	exit 1
fi
mkdir --parents --mode 700 "$OUTPUT"

cookies="$(mktemp)"
backup_request_html="$(mktemp)"
backup_page_html="$(mktemp)"
trap 'rm "$cookies" "$backup_request_html" "$backup_page_html"' EXIT

function log_in()
{
	# The missing "=" between some parameters and their value is intentional, it's specified like that
	# in the wget manpage for whatever reason.
	# To debug by showing output on stdout set output-document to "-".

	wget --save-cookies "$cookies" --keep-session-cookies --post-data="username=$LOGIN_EMAIL" \
		--output-document="/dev/null" --quiet "https://$TRACKER/login_password_page.php"

	wget --load-cookies "$cookies" --save-cookies "$cookies" --keep-session-cookies \
		--post-data="username=$LOGIN_EMAIL&password=$PASSWORD&return=index.php" \
		--output-document="/dev/null" --quiet "https://$TRACKER/login.php"
}


# Create backup
# The result is unused currently, but saved for troubleshooting. It will likely include something
# like "Backup scheduled on 2019-01-20 09:34. Check again later. Backups may take up to 30 minutes."

log_in
wget --load-cookies "$cookies" --save-cookies "$cookies" --keep-session-cookies \
	--post-data='' --output-document="$backup_request_html" --quiet \
	"https://$TRACKER/manage_backup.php"

# Wait 30 minutes for the backup to complete as suggested.
# TODO: Could do more aggressive polling for completion by waiting for shorter
#       periods (that still total 30 minutes) and checking multiple times.
sleep 30m

# Extract dates of backup from HTML
# The session likely expired during the sleep, so remove cookies to ensure it did and log in again.
rm "$cookies"
log_in
wget --load-cookies "$cookies" --save-cookies "$cookies" --keep-session-cookies \
	--output-document="$backup_page_html" --quiet \
	"https://$TRACKER/manage_backup_page.php"


# Use --perl-regexp to get non-greedy behavior by ".*?".
# See https://stackoverflow.com/questions/3027518/how-to-do-a-non-greedy-match-in-grep
database_date=$(grep --perl-regexp \
	"Download database and configuration \((.*?) created on (....-..-.. ..:..)\)" --only-matching \
	"$backup_page_html" | grep --only-matching "....-..-..")

attachments_date=$(grep --perl-regexp \
	"Download attachments \((.*?) created on (....-..-.. ..:..)\)" --only-matching \
	"$backup_page_html" | grep --only-matching "....-..-..")

if [ "$database_date" != "$date" ] || [ "$attachments_date" != "$date" ] ; then
	echo "Error: Backup dates mismatch current date! Did requesting a new backup fail?" >&2
	echo "Notice: Don't run this too close to midnight, the date might roll over meanwhile!" >&2
	echo "Current date:        $date" >&2
	echo "Date of database:    $database_date" >&2
	echo "Date of attachments: $attachments_date" >&2
	rmdir "$OUTPUT"
	exit 1
fi

# Download backup
wget --load-cookies "$cookies" --output-document="$OUTPUT/mantis-database.zip.tmp" --quiet \
	"https://$TRACKER/manage_backup_download.php?type=data"
wget --load-cookies "$cookies" --output-document="$OUTPUT/mantis-attachments.zip.tmp" --quiet \
	"https://$TRACKER/manage_backup_download.php?type=attach"

# Test zip files
unzip -tqq "$OUTPUT/mantis-database.zip.tmp"
unzip -tqq "$OUTPUT/mantis-attachments.zip.tmp"

# Set timestamp of zip files to that of the newest contained file
unzip -Tq "$OUTPUT/mantis-database.zip.tmp"
unzip -Tq "$OUTPUT/mantis-attachments.zip.tmp"

# We're done, move the files to their proper names to mark them as valid
mv -- "$OUTPUT/mantis-database.zip.tmp" "$OUTPUT/mantis-database.zip"
mv -- "$OUTPUT/mantis-attachments.zip.tmp" "$OUTPUT/mantis-attachments.zip"
